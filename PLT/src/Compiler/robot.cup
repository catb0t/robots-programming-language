package Robot;

import java_cup.runtime.*;
import java.io.*;

/* value	::= variable_name
			| base_value
			| boolean_expression
			| arithmetic_expression
			| constant_expression of variable_name
			| my constant_expression
			| constant_value */

parser code {:
	public  static String  robotProgram;
	public  static String  globalDeclarations;
	public  static boolean bDebugFlag;

	public static void main(String args[]) throws Exception {
		bDebugFlag = true;
		try {
			robotProgram = "package Think;\n";
			globalDeclarations = "";
			new parser(new Yylex(new BufferedReader(new FileReader("hello.robot")))).parse();
			System.out.println("Translated Java code:\n" + robotProgram);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
:}

terminal 			SEMI, PLUS, TIMES, LPAREN, RPAREN;
terminal 			THINK, END, SAY, NEWLINE, EQUALS, IS, INSTRUCTION, WITH;
terminal			GIVES, NOTHING, MEANS;
terminal Integer	NUMBER;
terminal String	 	ANYTHING;
terminal String	 	NUMBER_NAME, BOOLEAN_NAME, PERCENTAGE_NAME, LOCATION_NAME; 
terminal String	 	ENEMY_NAME, RESOURCE_NAME, LIST_NAME, FUNCTION_NAME;

non terminal 			expr_list, expr_part;
non terminal Integer 	expr;
non terminal String		statement, entry, variable_name, program, return_value;
non terminal			optnl, declaration, assign_op, value;
non terminal String		function_name, function, functions, argument;

precedence left PLUS;
precedence left TIMES;

program			::= optnl declaration optnl entry optnl functions optnl;

declaration		::=	variable_name NEWLINE declaration
     				| variable_name assign_op value NEWLINE declaration
					| /* empty */
;

variable_name	::=	NUMBER_NAME:nn		{:	parser.globalDeclarations += "\tpublic double " + nn.substring(0, nn.length() - 1) + ";\n";
											RESULT = nn; :}
					| LIST_NAME:ln		{:	parser.globalDeclarations += "\tpublic List " + ln.substring(0, ln.length() - 1) + ";\n";
											RESULT = ln; :}
					| BOOLEAN_NAME:bn	{:	parser.globalDeclarations += "\tpublic boolean " + bn.substring(0, bn.length() - 1) + ";\n";
											RESULT = bn; :}
					| PERCENTAGE_NAME:pn	{:	parser.globalDeclarations += "\tpublic Percentage " + pn.substring(0, pn.length() - 1) + ";\n";
												RESULT = pn; :}
					| LOCATION_NAME:ln	{:	parser.globalDeclarations += "\tpublic Location " + ln.substring(0, ln.length() - 1) + ";\n";
											RESULT = ln; :}
					| ENEMY_NAME:en		{:	parser.globalDeclarations += "\tpublic Enemy " + en.substring(0, en.length() - 1) + ";\n";
											RESULT = en; :}
					| RESOURCE_NAME:rn	{:	parser.globalDeclarations += "\tpublic boolean " + rn.substring(0, rn.length() - 1) + ";\n";
											RESULT = rn; :}
;

value			::= variable_name
;

function_name 	::=	FUNCTION_NAME
;

functions		::=	function NEWLINE functions
					| /* empty */
;

function		::=	INSTRUCTION function_name WITH argument MEANS NEWLINE statement GIVES return_value
;

return_value	::= value
					| NOTHING
;

argument		::=	value argument
					| /* empty */
;

assign_op		::=	EQUALS 
					| IS
;

entry			::= THINK NEWLINE statement:s END	{: 	parser.robotProgram += "public class Robot {\n" + parser.globalDeclarations + "\n";
																	parser.robotProgram += "\tpublic void think() {\n";
																	parser.robotProgram += s;
																	parser.robotProgram += "\t}\n";
																	parser.robotProgram += "}\n";
																	RESULT = parser.robotProgram; :}
;

optnl 			::= optnl NEWLINE
					| /* empty */
;

statement 		::= SAY ANYTHING:a NEWLINE	{: RESULT = "\t\tSystem.out.println(\"" + a + "\");\n"; :}
;

expr_list 		::= expr_list expr_part 
					| expr_part
;

expr_part 		::= expr:e {: System.out.println(" = "+e+";"); :} 
					SEMI
;

expr			::=	NUMBER:n					{: RESULT=n; :}
        			| expr:l PLUS expr:r		{: RESULT=new Integer(l.intValue() + r.intValue()); :}
	    			| expr:l TIMES expr:r 		{: RESULT=new Integer(l.intValue() * r.intValue()); :}
	    			| LPAREN expr:e RPAREN		{: RESULT=e; :}
;
