#summary One-sentence summary of this page.

= Introduction =

The ROBOT (Really Oblectationable Badass Obliteration Toy) Language: An Overview

= Details =


Introduction

The ROBOT programming language environment and target run-time application have been designed as a fun, intuitive sandbox with which children and novices can become exposed to, and master elementary programming concepts in the framework of a video game.


ROBOT
 

ROBOT: A simple, structured, interpreted, intuitive, overloaded, language for artificial intelligence.

Problem we're trying to solve:
For a new programmer, getting started with an general-purpose programming language and learning the associated terminology/concepts might be a daunting task.  Given that many people (kids) are already familiar with controlling avatars in a gaming environment, ROBOT provides them with the logical step of giving instructions to their avatar using a simple programming language instead of controlling it directly (e.g. with a joystick).

Summary

The ROBOT programming language offers a unique and enjoyable learning experience to the beginning programmer. It provides an interesting but also challenging problem domain which is intuitive to humans. The language is highly overloaded so users at all levels of exposure to math and programming concepts will be comfortable with standard operations. The interpreted design allows for constant compiler feedback and guidance during the programming process while the visual execution environment and robot avatar gives a clear display of the program in execution.

Keywords:

Simple


Entertaining (Eric)
Game (rules of the game, live battle simulation), A.I.

Intuitive/(Human)Readable/Overloaded/Verbose/Natural-language-like (Mengu)
Since ROBOT is targeted to kids/novice programmers, program constructs will be understandable without prior knowledge of classical programming terminology (keywords, concepts, etc.).

Type-less (Ashish)
Since ROBOT assumes no prior knowledge of programming concepts, we do not expect are users to understand that variables may have different types.  The interpreter will analyze the usage of identifiers to determine the type of those identifiers and interpret/convert them into Java objects

Procedural (Soonhac)
The user will be able to define procedures/subroutines for their robot to accomplish various tasks and use those abstractions in their main loop.

Interpreted (Aurelien)
ROBOT code is translated on the fly to Java (interpreted) and visualized in the runtime environment for immediate feedback.

Runtime visualizer (Eric)
The robot programming language utilizes a graphical run-time environment in which the user program determines the actions (interaction with the world) of a robot avatar during a live battle simulation.



Roles
PM: Eric
Integrator: Ashish
Guru: Mengu
Architect: Aurelien
Verification: Soonhac

<Ashish> start a googlecode rep.

Next meeting monday @1 CS Lounge.  Write your section (1 paragraph), if you can write sample program.  Check out Scratch from MIT.